openapi: 3.0.1
info:
  title: AgDx API
  description: AgDx API facilitates sharing of crop pest and disease data between
    platforms and/or by providing links between complementary ICT tools where appropriate.
  license:
    name: Apache 2.0
    url: http://springdoc.org
  version: 1.0.0
externalDocs:
  description: AgDx API Wiki Documentation
  url: '#'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/masgeek/agdxapi/1.0.0
  - url: http://localhost:9100
    description: Generated server url
tags:
  - name: Crop diseases
    description: Operations pertaining crop disease
  - name: Crop pests
    description: Operations pertaining crop pests
  - name: Crop data
    description: Operations pertaining crop
  - name: Pest data
    description: Operations pertaining pests
paths:
  /api/v1/pest/update/{id}:
    put:
      tags:
        - Pest data
      summary: Update pest record
      operationId: updatePestData
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PestEntity'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PestEntity'
      security:
        - api: []
  /api/v1/crop/update/{id}:
    put:
      tags:
        - Crop data
      summary: Update crop record
      operationId: updateCropData
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CropEntity'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CropEntity'
      security:
        - api: []
  /api/v1/crop/pest/update/{id}:
    put:
      tags:
        - Crop pests
      summary: Update crop pest record
      operationId: updatePestData_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CropPestEntity'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CropPestEntity'
      security:
        - api: []
  /api/v1/crop/disease/update/{id}:
    put:
      tags:
        - Crop diseases
      summary: Update crop disease record
      operationId: updatePestData_2
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CropDiseaseEntity'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CropDiseaseEntity'
      security:
        - api: []
  /api/v1/pest/add:
    post:
      tags:
        - Pest data
      summary: Add new pest
      operationId: addPestData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PestEntity'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PestEntity'
      security:
        - api: []
  /api/v1/crop/pest/add:
    post:
      tags:
        - Crop pests
      summary: Add new pest
      operationId: addPestData_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CropPestEntity'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CropPestEntity'
      security:
        - api: []
  /api/v1/crop/disease/add:
    post:
      tags:
        - Crop diseases
      summary: Add new crop pest record
      operationId: addPestData_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CropDiseaseEntity'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CropDiseaseEntity'
      security:
        - api: []
  /api/v1/crop/add:
    post:
      tags:
        - Crop data
      summary: Add new crop
      operationId: addCropData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CropEntity'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CropEntity'
      security:
        - api: []
  /api/v1/pest:
    get:
      tags:
        - Pest data
      summary: Return list of all pests
      operationId: getPestList
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagePestEntity'
      security:
        - api: []
  /api/v1/pest/{pestName}/scientific:
    get:
      tags:
        - Pest data
      summary: Get pests using scientific name
      operationId: getPestByScientificName
      parameters:
        - name: pestName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PestEntity'
      security:
        - api: []
  /api/v1/pest/{pestName}/common:
    get:
      tags:
        - Pest data
      summary: Get pests using common name
      operationId: getPestByCommonName
      parameters:
        - name: pestName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagePestEntity'
      security:
        - api: []
  /api/v1/pest/order/{order}:
    get:
      tags:
        - Pest data
      summary: Get pests using order
      operationId: getPestByOrder
      parameters:
        - name: order
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagePestEntity'
      security:
        - api: []
  /api/v1/pest/genus/{genus}:
    get:
      tags:
        - Pest data
      summary: Get pests using genus
      operationId: getPestByGenus
      parameters:
        - name: genus
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagePestEntity'
      security:
        - api: []
  /api/v1/pest/family/{family}:
    get:
      tags:
        - Pest data
      summary: Get pests using family
      operationId: getPestByFamily
      parameters:
        - name: family
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagePestEntity'
      security:
        - api: []
  /api/v1/crop:
    get:
      tags:
        - Crop data
      summary: Return list of all crops
      operationId: getCropList
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCropEntity'
      security:
        - api: []
  /api/v1/crop/{cropName}/scientific:
    get:
      tags:
        - Crop data
      summary: Get crops using scientific name
      operationId: getCropByScientificName
      parameters:
        - name: cropName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CropEntity'
      security:
        - api: []
  /api/v1/crop/{cropName}/common:
    get:
      tags:
        - Crop data
      summary: Get crops using common name
      operationId: getCropByCommonName
      parameters:
        - name: cropName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCropEntity'
      security:
        - api: []
  /api/v1/crop/pest:
    get:
      tags:
        - Crop pests
      summary: Return list of all pests
      operationId: pestList
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PestFeatureCollection'
      security:
        - api: []
  /api/v1/crop/pest/{sccientificName}/scientific:
    get:
      tags:
        - Crop pests
      summary: Get details of specific pest using its scientific name
      operationId: getPestByScientificName_1
      parameters:
        - name: sccientificName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PestFeatureCollection'
      security:
        - api: []
  /api/v1/crop/pest/{commonName}/common:
    get:
      tags:
        - Crop pests
      summary: Get details of specific pest using its common name
      operationId: getPestByCommonName_1
      parameters:
        - name: commonName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PestFeatureCollection'
      security:
        - api: []
  /api/v1/crop/pest/vector/{vector}:
    get:
      tags:
        - Crop pests
      summary: Get pests by vector
      operationId: getPestByVector
      parameters:
        - name: vector
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PestFeatureCollection'
      security:
        - api: []
  /api/v1/crop/pest/reporting-date:
    get:
      tags:
        - Crop pests
      summary: Find crop pests by reporting date range
      operationId: getPestsByReportingDate
      parameters:
        - name: fromDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PestFeatureCollection'
      security:
        - api: []
  /api/v1/crop/pest/record-date:
    get:
      tags:
        - Crop pests
      summary: Find crop pests by recording date range
      operationId: getPestsByRecordingDate
      parameters:
        - name: fromDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PestFeatureCollection'
      security:
        - api: []
  /api/v1/crop/pest/observe-date:
    get:
      tags:
        - Crop pests
      summary: Find crop pests by observation date range
      operationId: getPestsByObservedDate
      parameters:
        - name: fromDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PestFeatureCollection'
      security:
        - api: []
  /api/v1/crop/pest/management-status/{status}:
    get:
      tags:
        - Crop pests
      summary: Get crop pests by management status
      operationId: getPestByManagementStatus
      parameters:
        - name: status
          in: path
          required: true
          schema:
            type: string
            enum:
              - Treated
              - Untreated
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PestFeatureCollection'
      security:
        - api: []
  /api/v1/crop/pest/habitat/{habitat}:
    get:
      tags:
        - Crop pests
      summary: Get pests by habitat
      operationId: getPestByHabitat
      parameters:
        - name: habitat
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCropPestEntity'
      security:
        - api: []
  /api/v1/crop/pest/detection-status/{status}:
    get:
      tags:
        - Crop pests
      summary: Get pests by detection status
      operationId: getPestByDetectionStatus
      parameters:
        - name: status
          in: path
          required: true
          schema:
            type: string
            enum:
              - Undetected
              - Detected
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PestFeatureCollection'
      security:
        - api: []
  /api/v1/crop/pest/cultivar/{cultivar}:
    get:
      tags:
        - Crop pests
      summary: Find crop pest by cultivar type
      operationId: getPestsByCultivarName
      parameters:
        - name: cultivar
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PestFeatureCollection'
      security:
        - api: []
  /api/v1/crop/pest/crop-name/{cropName}:
    get:
      tags:
        - Crop pests
      summary: Find crop pest by crop name
      operationId: getPestsByCropName
      parameters:
        - name: cropName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PestFeatureCollection'
      security:
        - api: []
  /api/v1/crop/pest/category/{category}:
    get:
      tags:
        - Crop pests
      summary: Get pest by category
      operationId: getPestByCategory
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: array
            items:
              type: string
              enum:
                - Virus
                - Bacteria
                - Nematode
                - Plant
                - Insect
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCropPestEntity'
      security:
        - api: []
  /api/v1/crop/pest/admin-level/{adminLevel}/two:
    get:
      tags:
        - Crop pests
      summary: Find crop pest by administration levels
      operationId: getPestByAdminLevelTwo
      parameters:
        - name: adminLevel
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PestFeatureCollection'
      security:
        - api: []
  /api/v1/crop/pest/admin-level/{adminLevel}/three:
    get:
      tags:
        - Crop pests
      summary: Find crop pest by administration levels
      operationId: getPestByAdminLevelThree
      parameters:
        - name: adminLevel
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PestFeatureCollection'
      security:
        - api: []
  /api/v1/crop/pest/admin-level/{adminLevel}/one:
    get:
      tags:
        - Crop pests
      summary: Find crop pest by administration levels
      operationId: getPestByAdminLevelOne
      parameters:
        - name: adminLevel
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PestFeatureCollection'
      security:
        - api: []
  /api/v1/crop/ontology/{ontologyId}:
    get:
      tags:
        - Crop data
      summary: Get crops using ontology id
      operationId: getCropByOntologyId
      parameters:
        - name: ontologyId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CropEntity'
      security:
        - api: []
  /api/v1/crop/genus/{genus}:
    get:
      tags:
        - Crop data
      summary: Get crops using genus
      operationId: getCropByGenus
      parameters:
        - name: genus
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCropEntity'
      security:
        - api: []
  /api/v1/crop/family/{family}:
    get:
      tags:
        - Crop data
      summary: Get crops using family
      operationId: getCropByFamily
      parameters:
        - name: family
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCropEntity'
      security:
        - api: []
  /api/v1/crop/disease:
    get:
      tags:
        - Crop diseases
      summary: Return list of all diseases
      operationId: getDiseaseList
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiseaseFeatureCollection'
      security:
        - api: []
  /api/v1/crop/disease/{diseaseName}/scientific:
    get:
      tags:
        - Crop diseases
      summary: Get details of specific disease using its scientific name
      operationId: getDiseaseByScientificName
      parameters:
        - name: diseaseName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiseaseFeatureCollection'
      security:
        - api: []
  /api/v1/crop/disease/{diseaseName}/common:
    get:
      tags:
        - Crop diseases
      summary: Get details of specific disease using its common name
      operationId: getDiseaseByCommonName
      parameters:
        - name: diseaseName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiseaseFeatureCollection'
      security:
        - api: []
  /api/v1/crop/disease/verification-method/{verificationMethod}:
    get:
      tags:
        - Crop diseases
      summary: Find crop disease by verification methods
      operationId: getDiseaseByVerificationMethod
      parameters:
        - name: verificationMethod
          in: path
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiseaseFeatureCollection'
      security:
        - api: []
  /api/v1/crop/disease/reporting-date:
    get:
      tags:
        - Crop diseases
      summary: Find crop disease by reporting date range
      operationId: getDiseaseByReportingDate
      parameters:
        - name: fromDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiseaseFeatureCollection'
      security:
        - api: []
  /api/v1/crop/disease/record-date:
    get:
      tags:
        - Crop diseases
      summary: Find crop disease by recording date range
      operationId: getDiseaseByRecordingDate
      parameters:
        - name: fromDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiseaseFeatureCollection'
      security:
        - api: []
  /api/v1/crop/disease/project/{project}:
    get:
      tags:
        - Crop diseases
      summary: Get list of diseases by project name
      operationId: getDiseaseByProjectName
      parameters:
        - name: project
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiseaseFeatureCollection'
      security:
        - api: []
  /api/v1/crop/disease/pathogen/{name}/scientific:
    get:
      tags:
        - Crop diseases
      summary: 'Get list of diseases by scientific pathogen name '
      description: Search parameters are optional
      operationId: getDiseaseByScientificPathogen
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiseaseFeatureCollection'
      security:
        - api: []
  /api/v1/crop/disease/pathogen/{name}/common:
    get:
      tags:
        - Crop diseases
      summary: Get list of diseases by common pathogen names
      description: Search parameters are optional
      operationId: getDiseaseByCommonPathogen
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiseaseFeatureCollection'
      security:
        - api: []
  /api/v1/crop/disease/observe-date:
    get:
      tags:
        - Crop diseases
      summary: Find crop disease by observation date range
      operationId: getDiseaseByObservedDate
      parameters:
        - name: fromDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiseaseFeatureCollection'
      security:
        - api: []
  /api/v1/crop/disease/genebank/{accessionNumber}:
    get:
      tags:
        - Crop diseases
      summary: Get list of diseases by genebank number
      description: Search can be partial
      operationId: getDiseaseByGeneBankNumber
      parameters:
        - name: accessionNumber
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiseaseFeatureCollection'
      security:
        - api: []
  /api/v1/crop/disease/cultivar/{cultivar}:
    get:
      tags:
        - Crop diseases
      summary: Find crop disease by cultivar type
      operationId: getDiseaseByCultivarName
      parameters:
        - name: cultivar
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiseaseFeatureCollection'
      security:
        - api: []
  /api/v1/crop/disease/crop-name/{cropName}:
    get:
      tags:
        - Crop diseases
      summary: Find crop disease by crop name
      operationId: getDiseaseByCropName
      parameters:
        - name: cropName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiseaseFeatureCollection'
      security:
        - api: []
  /api/v1/crop/disease/country/{countryCode}:
    get:
      tags:
        - Crop diseases
      summary: Find crop diseases by country code
      operationId: getDiseaseByCountry
      parameters:
        - name: countryCode
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiseaseFeatureCollection'
      security:
        - api: []
  /api/v1/crop/disease/admin-level/{adminName}/two:
    get:
      tags:
        - Crop diseases
      summary: Find crop diseases by administration levels
      operationId: getDiseaseByAdminLevelTwo
      parameters:
        - name: adminName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiseaseFeatureCollection'
      security:
        - api: []
  /api/v1/crop/disease/admin-level/{adminName}/three:
    get:
      tags:
        - Crop diseases
      summary: Find crop diseases by administration levels
      operationId: getDiseaseByAdminLevelThree
      parameters:
        - name: adminName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiseaseFeatureCollection'
      security:
        - api: []
  /api/v1/crop/disease/admin-level/{adminName}/one:
    get:
      tags:
        - Crop diseases
      summary: Find crop diseases by administration levels
      operationId: getDiseaseByAdminLevelOne
      parameters:
        - name: adminName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiseaseFeatureCollection'
      security:
        - api: []
components:
  schemas:
    PestEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        commonName:
          type: string
          description: Pest common name
          example: Wooly apple aphid
        scientificName:
          type: string
          description: Pest scientific name
          example: Eriosoma lanigerum
        order:
          type: string
          description: Pest order
          example: Hemiptera
        family:
          type: string
          description: Pest family
          example: Aphididae
        genus:
          type: string
          description: Pest genus
          example: Eriosoma
        category:
          type: string
          description: Pest family
          example: Insect
          enum:
            - Virus
            - Bacteria
            - Nematode
            - Plant
            - Insect
    CropEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        commonName:
          type: string
          description: Crop common name
          example: Banana
        scientificName:
          type: string
          description: Crop scientific name
          example: Musca
        ontologyId:
          type: string
          description: Ontology id of the crop
          example: C350
        genus:
          type: string
          description: Genus crop
          example: Musa
        family:
          type: string
          description: Family crop
          example: Musaceae
    CropPestEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        countryCode:
          type: string
          description: Can be ISO2(KE) or ISO3(KEN)
          example: KE
        lat:
          type: number
          description: GPS lat
          example: 36.821945
        lon:
          type: number
          description: GPS lon
          example: -1.292066
        alt:
          type: number
          description: Identification Altitude above sea level
          example: 1200
        accuracy:
          type: number
          description: Accuracy of GPS location in meters
          example: 1.0
        geodeticDatum:
          type: string
          description: North America Datum or World geodetic coordinate system
          example: NAD83
        locationLevel1:
          type: string
          description: "Province, district or region"
          example: "Carroll, Ohio, United States"
        locationLevel2:
          type: string
          description: "Municipality,district"
          example: Victoria
        locationLevel3:
          type: string
          description: "Administrative level i.e city,down"
          example: CITY
        dateObserved:
          type: string
          description: Date when it was detected
          format: date
          example: 2021-01-13
        dateIdentified:
          type: string
          description: Date when it was identified
          format: date
          example: 2021-01-13
        dateRecorded:
          type: string
          description: Date when it was recorded into the system
          format: date
          example: 2021-01-13
        dateUpdated:
          type: string
          description: Date the record was updated
          format: date
          example: 2021-01-13
        dateUncertaintyInDays:
          type: integer
          description: Date Accuracy in Days
          format: int32
          example: 1
        cropName:
          type: string
          description: Crop name
          example: Cassava
        cultivarName:
          type: string
          description: Crop cultivar
          example: TMS 90257
        pestCommonName:
          type: string
          description: Common pest name
          example: Wooly apple aphid
        pestScientificName:
          type: string
          description: Scientific pest name
          example: Eriosoma lanigerum
        pestNativity:
          type: string
          description: Pest nativity status
          example: Native
          enum:
            - Introduced
            - Native
        pestDetectionStatus:
          type: string
          description: Pest detection status
          example: Detected
          enum:
            - Undetected
            - Detected
        pestCategory:
          type: string
          description: Pest category
          example: Insect
          enum:
            - Virus
            - Bacteria
            - Nematode
            - Plant
            - Insect
        pestHabitat:
          type: string
          description: Pest habitat
          example: "Forest, Soil"
        pestAbundance:
          type: string
          description: Pest abundance
          example: Single plant
        pestDensity:
          type: string
          description: "Range of percent cover or description (low, medium, common,\
            \ rare, etc.)"
          example: Common
          enum:
            - Low
            - Medium
            - High
            - Common
            - Rare
        pestTreatmentStatus:
          type: string
          description: "management status of the pest at time of recording (Treated,\
            \ Untreated)"
          example: Treated
          enum:
            - Treated
            - Untreated
        pestVector:
          type: string
          description: Vector of the pest
          example: Pied Crow
        pestIdentificationMethod:
          type: string
          description: "This can contain multiple identification methods (PCR,ELISA)"
          example: PCR
        pestVerificationMethod:
          type: string
          description: This can contain multiple verification methods
          example: Visual
        pestRecordBasis:
          type: string
          description: The basis of the occurrence (Human observation)
          example: Human observation
        pestVerified:
          type: boolean
          description: Observed pest has been verified
        severityNumberScale:
          type: integer
          description: Severity scale on an number level (5)
          format: int32
          example: 5
        severityPercentageScale:
          type: number
          description: Severity scale on an percentage level
          example: 0.5
        severityRangeScale:
          type: string
          description: Severity scale on an range level
          example: 1-5
        pestIncidence:
          type: string
          description: Number of measure for disease occurrence on subject population
          example: 50 Percent
        visitType:
          type: string
          description: Purpose of visit to area for collected data
          example: Invasive Species Survey
        areaUnit:
          type: string
          description: "Area measurement unit ha,acre,sqm"
          example: ha
        sampledAreaSize:
          type: number
          description: Size of area sampled
          example: 20.5
        affectedAreaSize:
          type: number
          description: Size of area affected
          example: 15
        sampleSource:
          type: string
          description: "Source of the sample i.e Field, greenhouse, lab"
          example: Field
        sampleDesc:
          type: string
          description: "Description of the sample i.e roots, leaves"
          example: Roots
        numOfSamples:
          type: integer
          description: Number of samples collected
          format: int32
          example: 500
        numOfAffectedSamples:
          type: integer
          description: Number of affected samples collected
          format: int32
          example: 350
        approximateQuantity:
          type: string
          description: "Approximate or range of subjects observed or biocontrol agents\
            \ released (15, 15-20)"
          example: "15"
        sampleUnits:
          type: string
          description: "Unit of measure (individuals, adults, grams, etc.)"
          example: adults
        labSampleId:
          type: string
          description: Lab sample identifier
          example: SMPL-567
        hasVisualSymptoms:
          type: boolean
          description: Specimens portrayed visual symptoms related to the pest
        dataCollectionMethod:
          type: string
          description: Methodology/protocol used to take the data (Aerial survey)
          example: Aerial survey
        genbankAccessionNumber:
          type: string
          description: GeneBank number for identification and confirmation
          example: LC.5656951
        projectName:
          type: string
          description: Name of the project as the source of data
          example: EDDMAPS
        identifiedBy:
          type: string
        reportedBy:
          type: string
        recordedBy:
          type: string
        reviewedBy:
          type: string
        comments:
          type: string
        identificationMethod:
          type: string
        visuallyIdentified:
          type: boolean
        originalSystemId:
          type: string
          description: "In the case of data from an aggregator,the unique identifier\
            \ from the original data set.Used in cases where two aggregators may encounter\
            \ the same data."
        contributingSystemId:
          type: string
          description: Unique identifier from system contributing data for followup
            and updating
    CropDiseaseEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        countryCode:
          type: string
          description: Can be ISO2(KE) or ISO3(KEN)
          example: KE
        lat:
          type: number
          description: GPS lat
          example: 36.821945
        lon:
          type: number
          description: GPS lon
          example: -1.292066
        alt:
          type: number
          description: Identification Altitude above sea level
          example: 1200
        accuracy:
          type: number
          description: Accuracy of GPS location in meters
          example: 1.0
        geodeticDatum:
          type: string
          description: North America Datum or World geodetic coordinate system
          example: NAD83
        locationLevel1:
          type: string
          description: "Province, district or region"
          example: "Carroll, Ohio, United States"
        locationLevel2:
          type: string
          description: "Municipality,district"
          example: Victoria
        locationLevel3:
          type: string
          description: "Administrative level i.e city,down"
          example: CITY
        dateObserved:
          type: string
          description: Date when it was detected
          format: date
          example: 2021-01-01
        dateIdentified:
          type: string
          description: Date when it was identified
          format: date
          example: 2021-01-13
        dateRecorded:
          type: string
          description: Date when it was recorded into the system
          format: date
          example: 2021-01-13
        dateUpdated:
          type: string
          description: Date the record was updated
          format: date
          example: 2021-01-13
        cropName:
          type: string
          description: Crop name
          example: Banana
        cultivarName:
          type: string
          description: Crop cultivar
          example: TMS 90257
        pathogenCommonName:
          type: string
          description: Common pest name
          example: BXW
        pathogenScientificName:
          type: string
          description: Scientific pest name
          example: Xanthomonas wilt of banana
        pathogenNativity:
          type: string
          description: Pest nativity status
          example: Introduced
          enum:
            - Introduced
            - Native
        pathogenDetectionStatus:
          type: string
          description: Pathogen detection status
          example: Detected
          enum:
            - Undetected
            - Detected
        pathogenCategory:
          type: string
          description: Pathogen category
          example: Virus
          enum:
            - Virus
            - Bacteria
            - Fungi
            - Protozoa
            - Plants
        pathogenVector:
          type: string
          description: Pathogen vector
          example: "Aphids, Equipment"
        pathogenIdentificationMethod:
          type: string
          description: "This can contain multiple identification methods (PCR,ELISA)"
          example: PCR
        pathogenTreatmentStatus:
          type: string
          description: "management status of the pathogen at time of recording (Treated,\
            \ Untreated)"
          example: Treated
          enum:
            - Treated
            - Untreated
        pathogenVerificationMethod:
          type: string
          description: This can contain multiple verification methods
          example: Visual
        pathogenRecordBasis:
          type: string
          description: The basis of the occurrence (Human observation)
          example: Human observation
        pathogenVerified:
          type: boolean
          description: Observed pathogen has been verified
        severityNumberScale:
          type: integer
          description: Severity scale on an number level (5)
          format: int32
          example: 5
        severityPercentageScale:
          type: number
          description: Severity scale on an percentage level
          example: 0.5
        severityRangeScale:
          type: string
          description: Severity scale on an range level
          example: 1-5
        pathogenIncidence:
          type: string
          description: Number of measure for disease occurrence on subject population
          example: 50 Percent
        areaUnit:
          type: string
          description: "Area measurement unit ha,acre,sqm"
          example: ha
        sampledAreaSize:
          type: number
          description: Size of area sampled
          example: 20.5
        affectedAreaSize:
          type: number
          description: Size of area affected
          example: 15
        sampleSource:
          type: string
          description: "Source of the sample i.e Field, greenhouse, lab"
          example: Field
        sampleDesc:
          type: string
          description: "Description of the sample i.e roots, leaves"
          example: Roots
        numOfSamples:
          type: integer
          description: Number of samples collected
          format: int32
          example: 500
        numOfAffectedSamples:
          type: integer
          description: Number of affected samples collected
          format: int32
          example: 350
        sampleUnits:
          type: string
          description: "Unit of measure (individuals, pieces, grams, etc.)"
          example: grams
        labSampleId:
          type: string
          description: Lab sample identifier
          example: SMPL-100
        hasVisualSymptoms:
          type: boolean
          description: Specimens portrayed visual symptoms related to the disease
        dataCollectionMethod:
          type: string
          description: Methodology/protocol used to take the data (Field visit)
          example: Field visit
        genbankAccessionNumber:
          type: string
          description: GeneBank number for identification and confirmation ofr the
            disease
          example: LC.789546
        projectName:
          type: string
          description: Name of the project as the source of data
          example: CIAT
        identifiedBy:
          type: string
        reportedBy:
          type: string
        recordedBy:
          type: string
        reviewedBy:
          type: string
        comments:
          type: string
        identificationMethod:
          type: string
        visuallyIdentified:
          type: boolean
        originalSystemId:
          type: string
          description: "In the case of data from an aggregator,the unique identifier\
            \ from the original data set.Used in cases where two aggregators may encounter\
            \ the same data."
        contributingSystemId:
          type: string
          description: Unique identifier from system contributing data for followup
            and updating
    PagePestEntity:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/PestEntity'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    Sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean
    PageCropEntity:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CropEntity'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    Geometry:
      required:
        - high_accuracy_gps
        - type
      type: object
      properties:
        altitude:
          type: number
        coordinates:
          type: array
          description: "GPS coordinates lon,lat,alt"
          example:
            - 36.821945
            - 6.234674
            - 0
          items:
            type: number
            description: "GPS coordinates lon,lat,alt"
        high_accuracy_gps:
          type: integer
          description: Accuracy of GPS location in meters
          format: int64
        iso3:
          type: string
        location_level1:
          type: string
          description: "Administrative level one; Province,district,region"
          example: Western Province
        location_level2:
          type: string
          description: "Administrative level two; municipality,district"
          example: Kakamega
        location_level3:
          type: string
          description: "Administrative level three; city,town or farm name"
          example: Shianda
        location_level4:
          type: string
        type:
          type: string
          enum:
            - Point
            - LineString
            - Polygon
            - MultiPoint
            - MultiLineString
            - MultiPolygon
    ImageDto:
      type: object
      properties:
        imageUrl:
          type: string
          description: Image http links
          example: https://placehold.co/600x400/000000/FFFFFF/png
    PestDataDto:
      type: object
      properties:
        id:
          type: integer
          description: Unique record id
          format: int64
          example: 1
        countryCode:
          maxLength: 2
          minLength: 2
          type: string
          description: "Country code of the identification: ISO2"
          example: KE
        countryName:
          type: string
          description: Country of the identification
          example: Kenya
        dateReported:
          type: string
          description: Date when occurrence was first reported
          format: date
          example: 2021-01-13
        dateUpdated:
          type: string
          description: Date when occurrence was updated
          format: date
          example: 2021-01-13
        dateReviewed:
          type: string
          description: Date when occurrence was reviewed
          format: date
          example: 2021-01-13
        ontologyName:
          type: string
          description: Common ontology name
          example: Banana
        commonName:
          type: string
          description: Common pest name
          example: Banana weevil borer
        scientificName:
          type: string
          description: Scientific pest name
          example: Cosmopolites sordidus
        areaSampled:
          type: number
          description: Size of land sampled
          example: 2
        affectedArea:
          type: number
          description: Size of land affected
          example: 1.5
        areaUnit:
          type: string
          description: Land measurement unit
          example: ha
        sampleSource:
          type: string
          description: Where the sample was obtained
          example: Field
        sampleDesc:
          type: string
          description: Description of sample type
          example: Banana stems
        sampleSize:
          type: integer
          description: Sample size
          format: int32
          example: 200
        affectedSampleSize:
          type: integer
          description: Sample size
          format: int32
          example: 200
        occurrenceSeverity:
          type: integer
          description: Severity of occurrence
          format: int32
          example: 4
        occurrenceStatus:
          type: string
          description: Status of occurrence
          example: Detected
        comments:
          type: string
          description: Comments
          example: "Adult weevils are about 10-12mm long, hard shelled and have the\
            \ pronounced snout typical of weevils"
        identificationMethod:
          type: string
          description: Identification method
          example: Visual
        dataCollectionMethod:
          type: string
          description: Data collection method
          example: Field visit
        visuallyIdentified:
          type: boolean
          description: Visually identified
          example: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageDto'
        identifiedBy:
          type: string
          description: Identified by
          example: John Doe
    PestFeature:
      required:
        - type
      type: object
      properties:
        geometry:
          $ref: '#/components/schemas/Geometry'
        properties:
          $ref: '#/components/schemas/PestDataDto'
        type:
          type: string
          enum:
            - Feature
    PestFeatureCollection:
      type: object
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/PestFeature'
    PageCropPestEntity:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CropPestEntity'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    DiseaseDataDto:
      type: object
      properties:
        id:
          type: integer
          description: Unique record id
          format: int64
          example: 1
        countryCode:
          maxLength: 2
          minLength: 2
          type: string
          description: "Country code of the identification: ISO2"
          example: KE
        countryName:
          type: string
          description: Country of the identification
          example: Kenya
        dateReported:
          type: string
          description: Date when occurrence was first reported
          format: date
          example: 2021-01-13
        dateUpdated:
          type: string
          description: Date when occurrence was updated
          format: date
          example: 2021-01-13
        dateReviewed:
          type: string
          description: Date when occurrence was reviewed
          format: date
          example: 2021-01-13
        ontologyName:
          type: string
          description: Common ontology name
          example: Banana
        commonName:
          type: string
          description: Common disease name
          example: BXW
        scientificName:
          type: string
          description: Scientific pest name
          example: Xanthomonas wilt of banana
        areaSampled:
          type: number
          description: Size of land sampled
          example: 2
        affectedArea:
          type: number
          description: Size of land affected
          example: 1.5
        areaUnit:
          type: string
          description: Land measurement unit
          example: ha
        sampleSource:
          type: string
          description: Where the sample was obtained
          example: Field
        sampleDesc:
          type: string
          description: Description of sample type
          example: Banana stems
        sampleSize:
          type: integer
          description: Sample size
          format: int32
          example: 50
        affectedSampleSize:
          type: integer
          description: Sample size
          format: int32
          example: 48
        occurrenceSeverity:
          type: integer
          description: Severity of occurrence
          format: int32
          example: 4
        occurrenceStatus:
          type: string
          description: Status of occurrence
          example: Detected
        comments:
          type: string
          description: Comments
          example: "Symptoms of BXW are progressive yellowing, withering and necrosis\
            \ of leaves;"
        identificationMethod:
          type: string
          description: Identification method
          example: Visual
        dataCollectionMethod:
          type: string
          description: Data collection method
          example: Field visit
        visuallyIdentified:
          type: boolean
          description: Visually identified
          example: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/ImageDto'
        identifiedBy:
          type: string
          description: Identified by
          example: John Doe
    DiseaseFeature:
      required:
        - type
      type: object
      properties:
        geometry:
          $ref: '#/components/schemas/Geometry'
        properties:
          $ref: '#/components/schemas/DiseaseDataDto'
        type:
          type: string
          enum:
            - Feature
    DiseaseFeatureCollection:
      type: object
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/DiseaseFeature'
  securitySchemes:
    api:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://example.org/oauth/dialog
          scopes:
            write:pests: modify pests in your database
            read:pests: read pests in your database
            write:diseases: modify diseases in your database
            read:diseases: read diseases in your database
    bearer:
      in: header
      name: bearer
      type: apiKey
